<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FightCore.Backend</name>
    </assembly>
    <members>
        <member name="T:FightCore.Backend.Configuration.PatternsInjection">
            <summary>
            Static class to add the patterns services to the dependency injection.
            </summary>
        </member>
        <member name="M:FightCore.Backend.Configuration.PatternsInjection.AddPatterns(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adds the required dependencies for patterns and all repositories
            and services to the <paramref name="services"/>.
            </summary>
            <param name="services">The service collection to build off.</param>
            <param name="configuration">The configuration to read the variables from.</param>
            <returns></returns>
        </member>
        <member name="T:FightCore.Backend.ContextFactory">
            <inheritdoc />
        </member>
        <member name="M:FightCore.Backend.ContextFactory.CreateDbContext(System.String[])">
            <inheritdoc />
        </member>
        <member name="T:FightCore.Backend.Controllers.BaseApiController">
            <inheritdoc />
        </member>
        <member name="F:FightCore.Backend.Controllers.BaseApiController.Mapper">
            <summary>
            The AutoMapper to be used to map objects to ViewModels.
            </summary>
        </member>
        <member name="M:FightCore.Backend.Controllers.BaseApiController.#ctor(AutoMapper.IMapper)">
            <inheritdoc />
        </member>
        <member name="M:FightCore.Backend.Controllers.BaseApiController.MappedOk``1(System.Object)">
            <summary>
            Maps a model to a ViewModel using <see cref="F:FightCore.Backend.Controllers.BaseApiController.Mapper"/>.
            Wraps this in the default Ok(...) result.
            </summary>
            <typeparam name="TViewModel">
            The type of the ViewModel to be mapped to.
            </typeparam>
            <param name="model">
            The model which should be mapped.
            </param>
            <returns>The mapped <paramref name="model"/> in an 200 result.</returns>
        </member>
        <member name="M:FightCore.Backend.Controllers.BaseApiController.GetUserIdFromClaims(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Gets the currently logged in user's Id based on the given <paramref name="claimsPrincipal"/>.
            </summary>
            <param name="claimsPrincipal">
            The claims from the user parsed from the JWT.
            </param>
            <returns>The id of the user or throws an exception if not parsed.</returns>
        </member>
        <member name="T:FightCore.Backend.Controllers.CharactersController">
            <inheritdoc />
        </member>
        <member name="M:FightCore.Backend.Controllers.CharactersController.#ctor(FightCore.Services.Games.ICharacterService,Microsoft.EntityFrameworkCore.DbContext,AutoMapper.IMapper)">
            <inheritdoc />
        </member>
        <member name="M:FightCore.Backend.Controllers.CharactersController.GetAllCharacters">
            <summary>
            Gets all characters.
            </summary>
            <returns>A list of all characters.</returns>
        </member>
        <member name="M:FightCore.Backend.Controllers.CharactersController.GetCharacter(System.Int64)">
            <summary>
            Gets a single character based on the provided <paramref name="id"/>.
            </summary>
            <param name="id">
            The id of the <see cref="T:FightCore.Models.Characters.Character"/> to be searched for.
            </param>
            <returns>The found <see cref="T:FightCore.Models.Characters.Character"/></returns>
        </member>
        <member name="M:FightCore.Backend.Controllers.CharactersController.CreateCharacter(FightCore.Backend.ViewModels.Characters.CreateCharacterViewModel)">
            <summary>
            Creates a new character based on the provided body.
            </summary>
            <param name="characterViewModel">
            The character to be created.
            </param>
            <returns>
            Where the character is created.
            </returns>
        </member>
        <member name="M:FightCore.Backend.Controllers.CharactersController.UpdateCharacter(System.Int64,FightCore.Backend.ViewModels.Characters.UpdateCharacterViewModel)">
            <summary>
            Updates a character based on the provided <paramref name="id"/> and body.
            </summary>
            <param name="id">
            The id of the existing character to override.
            </param>
            <param name="characterViewModel">
            The new values to override it with.
            </param>
            <returns>
            If the action was executed successfully.
            </returns>
        </member>
        <member name="T:FightCore.Backend.Controllers.GamesController">
            <summary>
            An endpoint to get information about games.
            </summary>
        </member>
        <member name="M:FightCore.Backend.Controllers.GamesController.#ctor(FightCore.Services.IGameService,FightCore.Services.Games.IStageService,FightCore.Services.Games.ICharacterService,AutoMapper.IMapper)">
            <inheritdoc />
        </member>
        <member name="M:FightCore.Backend.Controllers.GamesController.GetAllGames">
             <summary>
             Get all games
             </summary>
             <remarks>
             Gets all games known in the FightCore API.
            
             Some of these games might not be in use yet or be deprecated.
             </remarks>
             <returns></returns>
        </member>
        <member name="M:FightCore.Backend.Controllers.GamesController.GetGame(System.Int64)">
            <summary>
            Gets a singular game based on the provided <paramref name="gameId"/>.
            </summary>
            <param name="gameId">The id of the game to be found.</param>
            <returns>The game found.</returns>
        </member>
        <member name="M:FightCore.Backend.Controllers.GamesController.GetAllCharacters(System.Int64)">
            <summary>
            Gets all characters from a specific game.
            </summary>
            <param name="gameId">The id of the <see cref="T:FightCore.Models.Game"/> wanting the characters from.</param>
            <returns>The characters from that game.</returns>
        </member>
        <member name="M:FightCore.Backend.Controllers.GamesController.GetCharacter(System.Int64,System.Int64)">
            <summary>
            Gets a character based on the <paramref name="gameId"/> and the <paramref name="characterId"/>.
            </summary>
            <param name="gameId">
            The id of the <see cref="T:FightCore.Models.Game"/> to be searched for.
            </param>
            <param name="characterId">
            The id of the <see cref="T:FightCore.Models.Characters.Character"/> to be searched for.
            </param>
            <returns>The character found for the specified game.</returns>
        </member>
        <member name="M:FightCore.Backend.Controllers.GamesController.GetAllStages(System.Int64)">
            <summary>
            Gets all stages known for a specific game.
            </summary>
            <param name="gameId">
            The id of the <see cref="T:FightCore.Models.Game"/> to be searched for.
            </param>
            <returns>A list of stages found.</returns>
        </member>
        <member name="M:FightCore.Backend.Controllers.GamesController.GetStage(System.Int64,System.Int64)">
            <summary>
            Gets a stage based on the provided ids for the game and stage.
            </summary>
            <param name="gameId">
            The id of the <see cref="T:FightCore.Models.Game"/> to be searched for.
            </param>
            <param name="stageId">
            The id of the <see cref="T:FightCore.Models.Characters.Stage"/> to be searched for.
            </param>
            <returns>The found stage.</returns>
        </member>
        <member name="T:FightCore.Backend.Controllers.PostsController">
            <summary>
            Endpoints for CRUD actions for the Post object.
            </summary>
        </member>
        <member name="M:FightCore.Backend.Controllers.PostsController.#ctor(FightCore.Services.Posts.IPostService,FightCore.Services.Posts.ILikeService,AutoMapper.IMapper,Microsoft.EntityFrameworkCore.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:FightCore.Backend.Controllers.PostsController.GetPosts">
             <summary>
             Gets all public posts.
             </summary>
             <remarks>
             If the user is logged in, it will also receive which posts have been liked
             and the private posts from that user.
            
             THIS METHOD WILL BE REMOVED FOR A PAGINATED RESULT.
             </remarks>
             <returns></returns>
        </member>
        <member name="M:FightCore.Backend.Controllers.PostsController.GetPost(System.Int64)">
            <summary>
            Get a single post based on it's <paramref name="id"/>.
            </summary>
            <remarks>
            Post needs to be public or belong to the user.
            </remarks>
            <param name="id">
            The id of the post to be searched for.
            </param>
            <returns></returns>
        </member>
        <member name="M:FightCore.Backend.Controllers.PostsController.CreatePost(FightCore.Backend.ViewModels.Posts.CreatePostViewModel)">
            <summary>
            Creates a new post.
            </summary>
            <remarks>
            Creates a new post for the given body and the provided user.
            </remarks>
            <param name="viewModel"></param>
            <returns></returns>
        </member>
        <member name="M:FightCore.Backend.Controllers.PostsController.UpdatePost(FightCore.Backend.ViewModels.Posts.UpdatePostViewModel)">
             <summary>
             Updates the post for the provided body.
            
             TODO Id should be in route not in body.
             </summary>
             <param name="viewModel">
             The new values to update the post with.
             </param>
             <returns>If the action went successfully.</returns>
        </member>
        <member name="M:FightCore.Backend.Controllers.PostsController.LikePost(System.Int64)">
             <summary>
             Like post.
             </summary>
             <remarks>
             Likes the post for the given <paramref name="id"/> with the user
             derived from the token.
            
             If the post is already liked, the like will be removed.
             </remarks>
             <param name="id">
             The id of the post that is intended to be liked
             </param>
             <returns>
             </returns>
        </member>
        <member name="T:FightCore.Backend.Controllers.StagesController">
            <inheritdoc />
        </member>
        <member name="M:FightCore.Backend.Controllers.StagesController.#ctor(AutoMapper.IMapper,FightCore.Services.Games.IStageService)">
            <inheritdoc />
        </member>
        <member name="P:FightCore.Backend.ViewModels.GameViewModel.Id">
            <summary>
            The id of the game object.
            </summary>
        </member>
        <member name="P:FightCore.Backend.ViewModels.GameViewModel.Name">
            <summary>
            The name of the game.
            </summary>
        </member>
        <member name="P:FightCore.Backend.ViewModels.GameViewModel.Abbreviation">
            <summary>
            The abbreviation of the game's name.
            </summary>
        </member>
        <member name="P:FightCore.Backend.ViewModels.Posts.CreatePostViewModel.Body">
            <summary>
            The Markdown body of the post to be made.
            </summary>
        </member>
        <member name="P:FightCore.Backend.ViewModels.Posts.CreatePostViewModel.Title">
            <summary>
            The title of the post to be made.
            </summary>
        </member>
        <member name="P:FightCore.Backend.ViewModels.Posts.CreatePostViewModel.IsPrivate">
            <summary>
            A value indicating if the post is private or not.
            This is true for a private post.
            This is false for a public post.
            </summary>
        </member>
        <member name="P:FightCore.Backend.ViewModels.Posts.CreatePostViewModel.GameId">
            <summary>
            The id of the game to be linked to this post.
            </summary>
        </member>
        <member name="P:FightCore.Backend.ViewModels.Posts.PostViewModel.Id">
            <summary>
            The id of the post.
            </summary>
        </member>
        <member name="P:FightCore.Backend.ViewModels.Posts.PostViewModel.Title">
            <summary>
            The title of the post.
            </summary>
        </member>
        <member name="P:FightCore.Backend.ViewModels.Posts.PostViewModel.Body">
            <summary>
            The unparsed, unfiltered markdown body of the post.
            </summary>
        </member>
        <member name="P:FightCore.Backend.ViewModels.Posts.PostViewModel.BannerUrl">
            <summary>
            The banner url that corresponds to the selected game.
            </summary>
        </member>
        <member name="P:FightCore.Backend.ViewModels.Posts.PostViewModel.Author">
            <summary>
            The author's name who wrote the post.
            </summary>
        </member>
        <member name="P:FightCore.Backend.ViewModels.Posts.PostViewModel.Game">
            <summary>
            The name of the game that the post is linked to.
            </summary>
        </member>
        <member name="P:FightCore.Backend.ViewModels.Posts.PostViewModel.Likes">
            <summary>
            The amount of likes the post has.
            </summary>
        </member>
        <member name="P:FightCore.Backend.ViewModels.Posts.PostViewModel.Liked">
            <summary>
            If the current user has liked the post.
            </summary>
        </member>
        <member name="P:FightCore.Backend.ViewModels.Posts.PostViewModel.GameId">
            <summary>
            The id of the game.
            </summary>
        </member>
    </members>
</doc>
